##### TO COLLECT DATA ONLY #####
from reinforcement_learning import State
from transition import ActionSet, EffectSet

init:
	# Initialize to a random (or fixed) state
	last_state = State(3.5, 3.5, 3.5)

loop:
	# Get current state and goal state
	# temp_reading, humidity_reading, soil_moisture_reading are the current update's sensor readings, are of type float, and are in the range [1.0, 5.9]
	current_state = State(temp_reading, humidity_reading, soil_moisture_reading)

	# Create action set from actions, store in transition file for later use
	# water_action, ventilation_action, heat_action are of type string and can take on values in the set ["big_decrease", "small_decrease", "none", "small_increase", "big_increase"]
	# The fourthargument in putEffect (True) turns "data collection mode" on - this will push observation data to all buckets inside of the action set-variable records, making data collection more efficient
	action_set = ActionSet(water_action, ventilation_action, heat_action)
	put = EffectSet.putEffect(action_set, last_state, current_state, True)

	# Update state for next iteration
	last_state = current_state

##### TO COLLECT DATA AND RUN ML ALGORITHM #####
from reinforcement_learning import Agent, State
from transition import ActionSet, EffectSet

init:
	# Initialize to a random (or fixed) state
	last_state = State(3.5, 3.5, 3.5)

loop:
	# Get current state and goal state
	# temp_reading, humidity_reading, soil_moisture_reading are the current update's sensor readings, are of type float, and are in the range [1.0, 5.9]
	current_state = State(temp_reading, humidity_reading, soil_moisture_reading)
	goal_state = State.getGoal()

	# Run the ML algorithm and get a decision
	decision = Agent.run(current_state, goal_state)

	# Extract the actions from the decision
	water_action = decision['water_action']
	ventilation_action = decision['ventilation_action']
	heat_action = decision['heat_action']

	# Create action set from actions, store in transition file for later use
	# Here, the fourth argument in putEffect is omitted, as data collection mode is set to "off" by default
	action_set = ActionSet(water_action, ventilation_action, heat_action)
	put = EffectSet.putEffect(action_set, last_state, current_state)

	# Update state for next iteration
	last_state = current_state